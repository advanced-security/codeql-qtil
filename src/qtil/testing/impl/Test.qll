import codeql.util.Unit
import qtil.testing.impl.Qnit

/**
 * A test case that can be run by Qnit.
 *
 * This class is used to define the predicate `run(Qnit test)`, which is used to run the test
 * case. The `pass()` and `fail()` methods are used to report the result of the test case, as
 * follows:
 *
 * ```ql
 * class MyTest extends Test, Case {
 *  override predicate run(Qnit test) {
 *    if (someCondition)
 *    then test.pass("some condition passed")
 *    else test.fail("some condition failed")
 *   }
 * }
 * ```
 *
 * This is simply an abstract class extending the CodeQL's empty `Unit` type, as its subclasses
 * are singletons with no underlying data.
 */
abstract class Case extends Unit {
  /**
   * Overridable method to define the behavior of the test case, which should generally follow
   * the pattern of:
   *
   * ```ql
   * if (someCondition)
   * then test.pass("some condition passed")
   * else test.fail("some condition failed")
   * ```
   *
   * It is best to use `pass()` and `fail()` with unique strings, as this will allow Qnit to
   * properly count the number of tests that passed, and uniquely identify which tests failed,
   * due to the way QL works.
   *
   * This is designed this way because we cannot execute an abstract method in QL while knowing
   * which concrete class it belongs to. Rather, `Case.run(x)` holds for all `x` defined in all
   * test cases. Making `x` a field does not solve this problem. We also must work around the
   * limitation of not having anonymous functions. Etc.
   */
  abstract predicate run(Qnit test);
}

/**
 * Extend this class to suppress a warning that is generated by QL when you override an
 * abstract class without implementing a characteristic predicate.
 *
 * ```ql
 * class MyTest extends Test, Case {
 *   ...
 * }
 * ```
 *
 * Extends CodeQL's `Unit` type to match the `Test` class and support multiple inheritance.
 */
class Test extends Unit { }
